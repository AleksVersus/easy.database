QSP-Game Вспомогательная функция

На вход принимает два списка. Убирает из первого списка элементы, которые встречаются во втором списке

$args[0] - уменьшаемый список
$args[1] - вычитаемый список
$args[2] - разделитель
$args[3] - управляющее слово [union] или [un] - убирает из обоих списков повторяющиеся элементы, а на выход даёт неповторяющиеся

# edb.list.diff
!@ объявляем локальные переменные
local $src_list_, $del_list_, $delimiter_, $comm_ = $args[0], $args[1], $args[2], $lcase($args[3])
!@ локальные массивы для списков
local $first_list_, $second_list_
!@ правильная упарвляющая конструкция
if instr($comm_, '[un]') <> 0: $comm_ = $replace($comm_, '[un]', '[union]')
!@ разделитель
if $delimiter_ = '': $delimiter_ = '|'
!@ оба списка запихиваем в массивы
@em.str.inArr($src_list_, '$first_list_', $delimiter_, "[notspace][trim][strip]")
@em.str.inArr($del_list_, '$second_list_', $delimiter_, "[notspace][trim][strip]")
!@ теперь сравниваем списки, оставляя только несовпадающие значения
loop local i, size_, pos_ = 0, max(arrsize('first_list'), arrsize('second_list')), -1 while i<size_ step i+=1:
	if $first_list_[i] <> '':
		pos_ = arrpos('$second_list_', $first_list_[i])
		if pos_ <> -1:
			$first_list_[i] = ''
			$second_list_[pos_] = ''
		end
	else
		i = size_
	end
end
!@ когда из списков удалены все совпадающие значения, составляем новый список
loop local i, size_ = 0, arrsize('first_list') while i<size_ step i+=1:
	if $first_list_[i] <> '': $result += $delimiter_ + $first_list_[i]
end
if instr($comm_, '[union]') <> 0:
	loop local i, size_ = 0, arrsize('second_list') while i<size_ step i+=1:
		if $second_list_[i] <> '': $result += $delimiter_ + $second_list_[i]
	end
end
!@ 
$result = $mid($result, len($delimiter_) + 1)
--- edb.list.diff ---------------------------------

Внимание, эта функция очень проста и примитивна. Она годится лишь тогда, когда в списке нет повторяющихся элементов.
!@pp:if(build_easy_math!=Off):nopp
!@pp:var(em_str_inarr)
!@pp:endif
