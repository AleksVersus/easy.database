QSP-Game Заполнение строки значениями

!@ $0 - кортеж значений, помещаемых подряд в колонки
!@ $1 ... $18 - кортежи [идентификатор колонки, значение]
# edb.row.fill
!@ Перед использованием данной функции нужно выставить текущую строку и таблицу данных
!@pp:if(edb_fuse):include
if $EASY_DATABASE['ID'] = '': msg "row.fill: Ошибка. База данных не инициализирована." & exit
!@pp:endif
args[20], args[27] = arrsize('$args'), 0
$args[22] = $EASY_DATABASE['current_data_table']
!@pp:if(edb_fuse):include
if $args[22] = '': msg "row.fill: Ошибка. Не указан идентификатор текущей таблицы данных." & exit
!@pp:endif
$args[21] = $arritem('$<<$args[22]>>', 'current_row')
!@pp:if(edb_fuse):include
if $args[21] = '': msg "row.fill: Ошибка. Не указан идентификатор текущей строки." & exit
!@pp:endif
$args[25] = @edb.list.remove(@edb.dt.columns($args[22]), 'id') & !@ список колонок без первичных ключей
!@ нулевой аргумент может содержать как кортеж значений, которые нужно подряд поместить в колонки, так и
!@ кортеж состоящий из идентификатора колонки и значения
$args[23], %args[24] = %iif(len(%args[0]) = 2, %args[0], ['', %args[0]])
if $args[23] = '' or no @edb.list.is_el($args[25], $args[23]):
	!@ таблица данных не содержит указанный идентификатор колонки, значит
	!@ мы имеем дело со значениями к заполнению колонок подряд
	$args[26] = {
		%args[3] = @em.str.to_tpl($iif($args[2] = '', $args[3], $args[2]))
		$args[30] = @edb.col.type($args[0], $args[5])
		if $args[30] = 'tuple':
			%args[31], %args[3] = %args[3]
			dynamic "%<<$args[5]>>_<<$args[0]>>['<<$args[4]>>'] = <<%args[31]>>"
		elseif $args[30] = 'num':
			args[31], %args[3] = %args[3]
			dynamic "<<$args[5]>>_<<$args[0]>>['<<$args[4]>>'] = <<args[31]>>"
		else:
			$args[31], %args[3] = %args[3]
			dynamic "$<<$args[5]>>_<<$args[0]>>['<<$args[4]>>'] = '<<$args[31]>>'"
		end
		if %args[3] = []:
			killvar 'result'
			edb_list_for_each_break_ = 1
		else:
			$result = $str(%args[3])
		end
	}
	@edb.list.for_each($args[25], $args[26], $str(%args[0]), $args[21], $args[22])
	args[27] = 1
end
!@ остальные аргументы содержат пары [col_id, значение]
loop while args[27] < args[20] step args[27] += 1:
	!@ получаем пару:
	$args[23], %args[24] = %args[args[27]]
	if $args[23] <> '' and @edb.list.is_el($args[25], $args[23]):
		!@ талица данных содержит указанную колонку, получаем тип
		$args[28] = @edb.col.type($args[23], $args[22])
		if $args[28] = 'tuple':
			dynamic "%<<$args[22]>>_<<$args[23]>>['<<$args[21]>>'] = <<%args[24]>>"
		elseif $args[28] = 'num':
			args[29], %args[24] = %args[24]
			dynamic "<<$args[22]>>_<<$args[23]>>['<<$args[21]>>'] = <<args[29]>>"
		else:
			$args[29], %args[24] = %args[24]
			dynamic "$<<$args[22]>>_<<$args[23]>>['<<$args[21]>>'] = '<<$args[29]>>'"
		end
	end
end
!@ Не помечаем изменяемые колонки, как текущие, поскольку может статься так,
!@ что мы не будем знать, на какой колонке закончилось заполнение.
!@ помечаем строку, как текущую:
@edb.row.set_cur($args[21], $args[22])
--- edb.row.fill ---------------------------------

Внимание! Функция работает с массивами, поэтому большая часть локальных переменных заменена на значения массива args, дабы избежать пересечения имён.

!@ #20 - размер массива args на момент старта функции. То есть содержит строго число переданных аргументов.
!@ $21 - текущая строка
!@ $22 - текущая таблица данных
!@ $23 - идентификатор колонки (указанный в нулевом аргументе)
!@ %24 - значение, которое нужно присвоить ячейке, либо кортеж значений последовательно для колонок
!@ $25 - список колонок
!@ $26 - колбэк
!@ #27 - с какого элемента стартовать, если ещё перечислены колонки и значения
!@ $28 - тип колонки
!@ $29 - значение


Внутри колбэка сразу используем номера с тридатого

!@ $30 - тип колонки

{:for_each
	0 - column list 
	1 - callback
	2 - tuple of values
	3 - row_id
	4 - table id
	{:callback
		0 - item (column)
		1 - tail
		2 - result
		3 - tuple of values
		4 - row_id
		5 - table_id
	}
}
!@pp:if(build_easy_math!=Off):nopp
!@pp:var(em_str_inarr)
!@pp:endif
