QSP-Game Создаёт строку в таблице данных и возвращает идентификатор этой строки

$args[0] - идентификатор таблицы данных

# edb.dt.new_row
!@ значения по умолчанию:
if $args[0] = '': $args[0] = $EASY_DATABASE['current_data_table']
!@ предохранители:
if $EASY_DATABASE['ID'] = '':	msg "dt.new_col: Ошибка. База данных не инициализирована." & exit
if no @edb.list.is_el($EASY_DATABASE['data_tables.ids'], $args[0]):	msg 'dt.new_col: Ошибка. Таблица данных «<<$args[0]>>» не существует.' & exit
if $args[0] = '':	msg 'dt.new_col: Ошибка. Не указан идентификатор таблицы данных.' & exit
!@ название колонки первичных ключей и таблицы данных
local $pk_column_, $data_table_ = '$<<$args[0]>>_id', $args[0]
!@ получаем тип первичных ключей
local $pk_type_ = $arritem('$<<$data_table_>>', 'primary_keys_type')
!@ получаем последний первичный ключ
local $last_pk_ = $dyneval('$result = <<$pk_column_>>[]')
!@ локальная переменная для списка освободившихся ключей
local $free_keys_
$last_pk_ = iif($last_pk_ <> 'ids' and $last_pk_ <> '', $last_pk_, '')
local $pk_, num_
if instr($pk_type_, '[msecscount]') <> 0:
	loop local i = 0 while i < 100000 step i += 1:
		$pk_ = $str(@em.abs(msecscount))
		!@ если указанный ключ не существует, прерываем цикл
		if $arritem('$<<$pk_column_>>', $pk_) = '': jump 'key_create_end'
	end
	$pk_ = ''
elseif instr($pk_type_, '[uuid]') <> 0:
	loop local i = 0 while i < 100000 step i += 1:
		$pk_ = @em.gen_uuid()
		if $arritem('$<<$pk_column_>>', $pk_) = '': jump 'key_create_end'
	end
	$pk_ = ''
elseif instr($pk_type_, '[uid]') <> 0:
	loop local i = 0 while i < 100000 step i += 1:
		$pk_ = @em.str.random(16,'[inc][\d][\z][\я]') + $str(@em.abs(msecscount))
		if $arritem('$<<$pk_column_>>', $pk_) = '': jump 'key_create_end'
	end
	$pk_ = ''
elseif instr($pk_type_, '[hex:') <> 0:
	num_ = val(@em.tag.getNum($pk_type_, 'hex'))
	if num_ < 1: num_ = 1
	$free_keys_ = $arritem('$<<$data_table_>>', 'free_keys')
	if $free_keys_ = '':
		$pk_ = @edb.gen_next_hex($last_pk_, num_)
	else
		!@ если список освобождённых ключей не пуст, извлекаем освобождённый ключ
		$pk_ = @edb.list.shift($free_keys_)
		dynamic "$<<$data_table_>>['free_keys'] = @edb.list.remove($<<$data_table_>>['free_keys'], '<<$pk_>>')"
	end
	!@ если ключ существует в таблице данных, значит предел заполнения достигнут,
	!@ и новая запись не создаётся. 
	if $arritem('$<<$pk_column_>>', $pk_) <> '': $pk_ = ''
	jump 'key_create_end'
elseif instr($pk_type_, '[num:') <> 0:
	num_ = val(@em.tag.getNum($pk_type_, 'num'))
	if num_ < 1: num_ = 1
	$free_keys_ = $arritem('$<<$data_table_>>', 'free_keys')
	if $free_keys_ = '':
		$pk_ = @edb.gen_next_num($last_pk_, num_)
	else
		!@ если список освобождённых ключей не пуст, извлекаем освобождённый ключ
		$pk_ = @edb.list.shift($free_keys_)
		dynamic "$<<$data_table_>>['free_keys'] = @edb.list.remove($<<$data_table_>>['free_keys'], '<<$pk_>>')"
	end
	!@ если ключ существует в таблице данных, значит предел заполнения достигнут,
	!@ и новая запись не создаётся. 
	if $arritem('$<<$pk_column_>>', $pk_) <> '': $pk_ = ''
	jump 'key_create_end'
elseif instr($pk_type_, '[rhex:') <> 0:
	num_ = val(@em.tag.getNum($pk_type_, 'rhex'))
	if num_ < 8: num_ = 8
	loop local i = 0 while i < 100000 step i += 1:
		$pk_ = @em.str.random(num_,'[inc][\h]')
		if $arritem('$<<$pk_column_>>', $pk_) = '': jump 'key_create_end'
	end
elseif instr($pk_type_, '[rnum:') <> 0:
	num_ = val(@em.tag.getNum($pk_type_, 'rnum'))
	if num_ < 16: num_ = 16
	loop local i = 0 while i < 100000 step i += 1:
		$pk_ = @em.str.random(num_,'[inc][\d]')
		if $arritem('$<<$pk_column_>>', $pk_) = '': jump 'key_create_end'
	end
elseif instr($pk_type_, '[rstr:') <> 0:
	num_ = val(@em.tag.getNum($pk_type_, 'rstr'))
	if num_ < 16: num_ = 16
	loop local i = 0 while i < 100000 step i += 1:
		$pk_ = @em.str.random(num_,'[inc][\d][\z][\я]')
		if $arritem('$<<$pk_column_>>', $pk_) = '': jump 'key_create_end'
	end
else
	loop local i = 0 while i < 100000 step i += 1:
		$pk_ = @em.str.random(16,'[inc][\d][\z][\я]')
		if $arritem('$<<$pk_column_>>', $pk_) = '': jump 'key_create_end'
	end
end
:key_create_end
if $pk_ <> '':
	!@ если ключ сгенерирован, создаём строку.
	!@ Строка создаётся генерацией новых элементов во всех массивах столбцов.
	local $columns_ = $arritem('$<<$args[0]>>', 'columns')
	local $callback_ = {
		local $col_type_ = $arritem('$<<$args[1]>>_<<$args[0]>>', 0)
		if $col_type_ = 'num':
			dynamic "<<$args[1]>>_<<$args[0]>>['<<$args[2]>>'] = 0"
		elseif $col_type_ = 'ids':
			dynamic "$<<$args[1]>>_<<$args[0]>>['<<$args[2]>>'] = '<<$args[2]>>'"
		else
			dynamic "$<<$args[1]>>_<<$args[0]>>['<<$args[2]>>'] = ''"
		end
	}
	$args['buffer'] = @edb.list.for_each($columns_, $callback_, '|', $args[0], $pk_)
	!@ устанавливаем текущую строку
	@edb.row.set_cur($pk_, $data_table_)
	!@ возвращаем идентификатор созданной строки
	$result = $pk_ & exit
else
	!@ если ключ не сгенерирован (например, таблица достигла предела),
	!@ возвращаем пустое значение, не создавая строку:
	$result = '' & exit
end
--- edb.dt.new_row ---------------------------------
* [num:N] - первичные ключи генерируются в виде N-значного десятеричного числа. Это ограничит высоту таблицы данных максимальным возможным в такой таблице числом.
* [rhex:N] - первичным ключом будет назначаться случайное шестнадцатеричное число, состоящее из не менее, чем 8 символов.
* [rnum:N] - первичным ключом будет назначаться случайное десятерично число, состоящее из не менее, чем 16 символов.
* [rstr:N] - первичный ключ генерируется, как случайный набор букв и цифр из N символов, но не менее 16 символов.