QSP-Game Создаёт строку в таблице данных и возвращает идентификатор этой строки

$args[0] - идентификатор таблицы данных

# edb.dt.new_row
if $args[0] = '': $args[0] = $EASY_DATABASE['current_data_table']
!@pp:if(edb_fuse):include
if $EASY_DATABASE['ID'] = '':	msg "dt.new_row: Ошибка. База данных не инициализирована." & exit
if $args[0] = '':	msg 'dt.new_row: Ошибка. Не указан идентификатор таблицы данных.' & exit
if no @edb.list.is_el($EASY_DATABASE['data_tables.ids'], $args[0]):	msg 'dt.new_row: Ошибка. Таблица данных «<<$args[0]>>» не существует.' & exit
!@pp:endif
!@ название колонки первичных ключей и таблицы данных
$args[20] = '$<<$args[0]>>_id'
!@ получаем тип первичных ключей
$args[21] = $arritem('$<<$args[0]>>', 'primary_keys_type')
!@ получаем последний первичный ключ
$args[22] = $dyneval('$result = <<$args[20]>>[]')
!@ локальная переменная для списка освободившихся ключей
$args[22] = iif($args[22] <> 'ids' and $args[22] <> '', $args[22], '')
if instr($args[21], '[msecscount]') <> 0:
	loop args[26] = 0 while args[26] < 100000 step args[26] += 1:
		$args[24] = $str(@em.abs(msecscount))
		!@ если указанный ключ не существует, прерываем цикл
		if $arritem('$<<$args[20]>>', $args[24]) = '': jump 'key_create_end'
	end
	$args[24] = ''
elseif instr($args[21], '[uuid]') <> 0:
	loop args[26] = 0 while args[26] < 100000 step args[26] += 1:
		$args[24] = @em.gen_uuid()
		if $arritem('$<<$args[20]>>', $args[24]) = '': jump 'key_create_end'
	end
	$args[24] = ''
elseif instr($args[21], '[uid]') <> 0:
	loop args[26] = 0 while args[26] < 100000 step args[26] += 1:
		$args[24] = @em.str.random(16,'[inc][\d][\z][\я]') + $str(@em.abs(msecscount))
		if $arritem('$<<$args[20]>>', $args[24]) = '': jump 'key_create_end'
	end
	$args[24] = ''
elseif instr($args[21], '[hex:') <> 0:
	args[25] = val(@em.tag.getNum($args[21], 'hex'))
	if args[25] < 1: args[25] = 1
	$args[23] = $arritem('$<<$args[0]>>', 'free_keys')
	if $args[23] = '':
		$args[24] = @edb.gen_next_hex($args[22], args[25])
	else
		!@ если список освобождённых ключей не пуст, извлекаем освобождённый ключ
		$args[24] = @edb.list.first($args[23])
		dynamic "$<<$args[0]>>['free_keys'] = @edb.list.remove($<<$args[0]>>['free_keys'], '<<$args[24]>>')"
	end
	!@ если ключ существует в таблице данных, значит предел заполнения достигнут,
	!@ и новая запись не создаётся. 
	if $arritem('$<<$args[20]>>', $args[24]) <> '': $args[24] = ''
	jump 'key_create_end'
elseif instr($args[21], '[num:') <> 0:
	args[25] = val(@em.tag.getNum($args[21], 'num'))
	if args[25] < 1: args[25] = 1
	$args[23] = $arritem('$<<$args[0]>>', 'free_keys')
	if $args[23] = '':
		$args[24] = @edb.gen_next_num($args[22], args[25])
	else
		!@ если список освобождённых ключей не пуст, извлекаем освобождённый ключ
		$args[24] = @edb.list.first($args[23])
		dynamic "$<<$args[0]>>['free_keys'] = @edb.list.remove($<<$args[0]>>['free_keys'], '<<$args[24]>>')"
	end
	!@ если ключ существует в таблице данных, значит предел заполнения достигнут,
	!@ и новая запись не создаётся. 
	if $arritem('$<<$args[20]>>', $args[24]) <> '': $args[24] = ''
	jump 'key_create_end'
elseif instr($args[21], '[rhex:') <> 0:
	args[25] = val(@em.tag.getNum($args[21], 'rhex'))
	if args[25] < 8: args[25] = 8
	loop args[26] = 0 while args[26] < 100000 step args[26] += 1:
		$args[24] = @em.str.random(args[25],'[inc][\h]')
		if $arritem('$<<$args[20]>>', $args[24]) = '': jump 'key_create_end'
	end
elseif instr($args[21], '[rnum:') <> 0:
	args[25] = val(@em.tag.getNum($args[21], 'rnum'))
	if args[25] < 16: args[25] = 16
	loop args[26] = 0 while args[26] < 100000 step args[26] += 1:
		$args[24] = @em.str.random(args[25],'[inc][\d]')
		if $arritem('$<<$args[20]>>', $args[24]) = '': jump 'key_create_end'
	end
elseif instr($args[21], '[rstr:') <> 0:
	args[25] = val(@em.tag.getNum($args[21], 'rstr'))
	if args[25] < 16: args[25] = 16
	loop args[26] = 0 while args[26] < 100000 step args[26] += 1:
		$args[24] = @em.str.random(args[25],'[inc][\d][\z][\я]')
		if $arritem('$<<$args[20]>>', $args[24]) = '': jump 'key_create_end'
	end
else
	loop args[26] = 0 while args[26] < 100000 step args[26] += 1:
		$args[24] = @em.str.random(16,'[inc][\d][\z][\я]')
		if $arritem('$<<$args[20]>>', $args[24]) = '': jump 'key_create_end'
	end
end
:key_create_end
if $args[24] <> '':
	!@ если ключ сгенерирован, создаём строку.
	!@ Строка создаётся генерацией новых элементов во всех массивах столбцов.
	$args[27] = $arritem('$<<$args[0]>>', 'columns')
	$args[28] = {
		$args[20] = $arritem('$<<$args[1]>>_<<$args[0]>>', 0)
		if $args[20] = 'num':
			dynamic "<<$args[1]>>_<<$args[0]>>['<<$args[2]>>'] = 0"
		elseif $args[20] = 'ids':
			dynamic "$<<$args[1]>>_<<$args[0]>>['<<$args[2]>>'] = '<<$args[2]>>'"
		else
			dynamic "$<<$args[1]>>_<<$args[0]>>['<<$args[2]>>'] = ''"
		end
	}
	$args['buffer'] = @edb.list.for_each($args[27], $args[28], '|', $args[0], $args[24])
	!@ устанавливаем текущую строку
	@edb.row.set_cur($args[24], $args[0])
	!@ возвращаем идентификатор созданной строки
	$result = $args[24] & exit
else
	!@ если ключ не сгенерирован (например, таблица достигла предела),
	!@ возвращаем пустое значение, не создавая строку:
	$result = '' & exit
end
--- edb.dt.new_row ---------------------------------


$args[20] - название колонки первичных ключей
$args[21] - тип первичных ключей
$args[22] - последний первичный ключ в таблице
$args[23] - список освободившихся ключей
$args[24] - первичный ключ
args[25] - num_
args[26] - заменяет i
$args[27] - список колонок
$args[28] - функция типа колбэк для обработки списка колонок


=Типы первичных ключей=

--Порядковые ключи--

* [hex:N] - первичные ключи генерируются, как порядковое шестнадцатерияное число из N символов. Это ограничит высоту таблицы данных максимальным возможным в этой таблице данных числом. Чтобы повторно использовать ключи от ранее созданных, а затем удалённых строк, введён специальный список освободившихся ключей. 
* [num:N] - первичные ключи генерируются в виде N-значного десятеричного числа. Это ограничит высоту таблицы данных максимальным возможным в такой таблице числом. Чтобы повторно использовать ключи от ранее созданных, а затем удалённых строк, введён специальный список освободившихся ключей.

--Псевдослучайные ключи--

* [msecscount] - первичные ключи будут генерироваться на основе данных из функции msecscount. Число преобразуется к положительному, затем к строке.
* [uuid] - первичные ключи генерируются в формате UUID.
* [rhex:N] - первичным ключом будет назначаться случайное шестнадцатеричное число, состоящее из не менее, чем 8 символов.
* [rnum:N] - первичным ключом будет назначаться случайное десятерично число, состоящее из не менее, чем 16 символов.
* [uid] - первичный ключ будет генерироваться из строки случайных букв и цифр плюс текущее абсолютное значение от msecscount
* [rstr:N] - первичный ключ генерируется, как случайный набор букв и цифр из N символов, но не менее 16 символов.



!@pp:if(build_easy_math!=Off):nopp
!@pp:var(em_abs)
!@pp:var(em_gen_uuid)
!@pp:var(em_str_random)
!@pp:var(em_tag_getnum)
!@pp:endif
