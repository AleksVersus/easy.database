==система управления Базой данных Easy.DataBase==

Система управления базой данных — это комплексный модуль, предназначенный для простого редактирования реляционной базы данных на QSP.

Возможно всё, что я придумал, уже реализовано в модуле Олегуса.

=База данных=

Технически `QSP` не позволяет организовывать полноценную базу данных, да она в принципе и не нужна. Тем не менее можно реализовать некий аналог базы данных, который будет соответствовать неким концептуальным аспектам, присущим базам данных.

База данных в `QSP` - это наборы массивов, описывающих Таблицы данных.

Сама по себе База Данных не существует, как объект. Однако в командах на неё создаётся услованя ссылка "bd", чтобы было понятно, что мы работаем с Базой данных. Т.е. таким образом команды становятся более читаемыми.

Различные технические записи Базы Данных делаются в массив $EASY_DATABASE[]. Например, здесь можно хранить названия текущих таблиц данных, колонок, строк, а так же список всех таблиц данных и прочую информацию.

+Неявный метод+

Неявный метод применённый к базе данных выглядит так:

	bd

И при этом будет возвращён кортеж:

	('data_base','','список таблиц данных')

Отсюда можно получить список таблиц данных для работы с ними. Это удобно внутри парсера команд.

--Таблица данных--

Таблица данных — это набор массивов, каждый из которых является столбцом такой таблицы. Соответственно строкой можно считать ряд записей во все массивы Таблицы данных под одним индексом.

Так была реализована моя первая таблица данных для всех объектов игры, в т.ч реплик диалогов, персонажей и прочего. Однако, впоследствии оказалось, что хранить все возможные объекты в одной таблице данных невозможно. Это просто перегружает таблицу, усложняет поиск и так далее. Проще разбить общую Таблицу на связанные ссылками Таблицы и таким образом организовать общую Базу данных.

-Свойства таблицы данных-

ID - идентификатор. Соответствует имени массива, описывающего таблицу данных. Именно по этому идентификатору мы и обращаемся к таблице в команде:

	bd.objects... — обращаемся к таблице "objects"

NAME — название таблицы данных. Это название должно выражать краткую суть таблицы. Если оно существует, то выводится вместо словаря со столбцами. Хранится в ячейке ID['NAME'] - здесь вместо ID - идентификатор таблицы.

-Команды для работы с таблицей данных-

+Создание таблицы данных+

Для создания Таблицы данных используется метод .newTable{} для Базы данных:

	bd.newTable{идентификатор_таблицы,название_таблицы}

Идентификатор таблицы должен соответствовать требованиям к имени массива, поскольку на основе этого идентификатора будет инициализирован массив, описывающий таблицу данных. Название таблицы можно не указывать. Пример:

	bd.newTable{objects}

В данном случае мы создаём таблицу данных с идентификатором objects. При этом создаётся массив $objects, есил он ещё не создан, и в нулевую ячейку этого массива вносится его идентификатор 'objects'.

```qsp
$objects['ID']='objects'
```

+Удаление таблицы данных+

Удаление таблицы данных происходит через метод базы данных .delTables{}. В фигурных скобках указываем один или несколько идентификаторов таблиц через запятую.

	bd.delTables{идентификатор_таблицы}
	bd.delTables{таблица1,таблица2,таблица3}

При вызове данного метода полностью уничтожаются все массивы, соответствующие столбцам таблицы данных, а так же массив, описывающий таблицу данных. Пример:

	bd.delTables{objects}

В данном случае мы удаляем таблицу с идентификатором objects.

+Неявный метод+

Неявный метод применительно к таблице вернёт нам кортеж значений: ('data_table',идентификатор_таблицы,список колонок таблицы). Пример:

	bd.objects

Здесь мы вызвали неявный метод для таблицы с идентификатором objects. Если таблица существует, на выходе мы получим примерно такой кортеж:

	('data_table','objects','sid|uid|body|charge|position')

Здесь 'data_table' — это тип данных, к которым был применён неявный метод, 'objects' - идентификатор этих данных, а список столбцов - содержимое. Если для таблицы данных было указано имя, будет возвращено имя таблицы.

=Основные принципы=

	* простые в написании запросы к модулю, которые будут приводить к эффективным результатам. Например:
		```python
			bd.objects.curString{000001}
		```
	* Простые и понятные ссылки между таблицами данных:
		```python
			# ссылка на таблицу objects и строку с айди 000001
			objects.000001
		```
	* Уникальные идентификаторы, не повторяющиеся на высоту всей таблицы данных

=Инструментарий=

Язык запросов к базе данных типа SQL, который должен уметь:

	* создавать в базе данных новые таблицы;
	* добавлять в таблицы новые записи;
	* изменять записи;
	* удалять записей;
	* выбирать записи из одной или нескольких таблиц одновременно;
	* изменять структуры таблиц (?).

=Команды=

Команды записываются по принципу:

	объект.методОбъекта{параметр_1,параметр_2,параметр_3, ...}

В действительности методы не являются методами, а объекты - объектами, просто подобная абстракиця удобна для представления.

Объекты адресуются согласно иерархии:

	База Данных > Таблица Данных > Столбец > Строка (или UID) > тэг_1 > тэг_2 > ...

Таким образом мы можем получить доступ не только к значению ячейки, но и к её внутреннему содержимому.

	bd.object.body.12.np.оружие.proveThis

Чтобы передать методу параметр, используются фигурные скобки:

	bd.newTable{personage}

Для разделения параметров используется запятая, например:

	bd.newTable{object,personage,dialogue,etc}

Каждый параметр отвечает понятию "значение", и при записи значений нельзя использовать фигурные скобки и запятые. Если требуется указать в значении фигурную скобку или запятую используйте ссылки на аргументы, а сами значения передавайте остальными аргументами к процедуре 'sql'.
	
```qsp
gosub 'sql','object.newString{eRA56yuDf,<tag>,INVENTORY,,4,15,%args1%}','goto "Dialog","Aleksis Verichev",3,567'
```

Так же нельзя в качестве параметров напрямую записывать кортежи. Если хотите передать в параметр кортеж, пользуйтесь дополнительным аргументом и ссылкой на него:

```qsp
gosub 'sql','object.newString{eRA56yuDf,<tag>,INVENTORY,%args2%,4,15,%args1%}','goto "Dialog","Aleksis Verichev",3,567',(1,2,3,'string')
```

Неявный метод. Данный метод кортеж (Тип Объекта,Имя или Идентификатор Объекта,Содержимое объекта)

Вызов неявного метода осуществляется путём обращения к объекту без явного указания метода. Примеры в каждом объекте отдельно.

Вы можете объединять команды в листы команд (командлист), чтобы упрощённо работать с различными объектами базы данных.

```qsp
local $commands="
	bd.objects.newString{}
	bd.objects.body.000001.name.set{Одноручный меч}
	bd.objects.body.000023.power.fire.set{137}
	bd.dialog.replics.ff012.clr{}.append{power}.append{fire}.set{137}
"
@edb($commands)
```

Каждая команда в таком листе должна записываться на отдельной строке.

--Принципы и порядок обработки комманд и возвращаемых результатов--

"edb" — это общая локация, которая парсит и запускает на выполнение все команды из командлиста. Принцип её работы очень прост. Она разделяет пришедший командлист на отдельные строки команд, а затем поочерёдно обрабатывает каждую строку.

В свою очередь каждая команда разбирается парсером на цепочки объектов-методов и прилагаемых к ним аргументов, а затем происходит обработка этих объектов последовательно один за одним по цепочке.

Объекты в цепочке становятся текущими ("активными") и это означает, что методы применяются именно к ним.

Неявный метод вызывается постоянно для всех объектов, кроме методов.

=Список типов данных, применяемых внутри базы данных=

data_base - сама база данных
data_table — таблица данных в базе данных
table_col - колонка в таблице данных
table_string - строка в таблице данных
table_cell - ячейка в таблице данных

