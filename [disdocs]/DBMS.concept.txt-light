==система управления Базой данных Easy.DataBase==

Система управления базой данных — это комплексный модуль, предназначенный для простого редактирования реляционной базы данных на QSP.

Возможно всё, что я придумал, уже реализовано в модуле Олегуса.

=База данных=

--Колонки в таблице данных--

Колонки в таблице данных представляют собой массивы, названия которых состоят из комбинации идентификатора таблицы и непосредственно колонки. Как пример:

	* $objects_sid - колонка таблицы данных objects под именем sid.
	* $objects_body - колонка таблицы данных objects под именем body

=Основные принципы=

	* Простые в написании запросы к модулю, которые будут приводить к эффективным результатам. Например:
		```python
			bd.objects.curString{000001}
		```
	* Простые и понятные ссылки между таблицами данных:
		```python
			# ссылка на таблицу objects и строку с айди 000001
			objects.000001
		```
	* Уникальные идентификаторы, не повторяющиеся на высоту всей таблицы данных

=Инструментарий=

Язык запросов к базе данных типа SQL, который должен уметь:

	* создавать в базе данных новые таблицы;
	* добавлять в таблицы новые записи;
	* изменять записи;
	* удалять записей;
	* выбирать записи из одной или нескольких таблиц одновременно;
	* изменять структуры таблиц (?).

=Команды=

Команды записываются по принципу:

	объект.методОбъекта{параметр_1,параметр_2,параметр_3, ...}

В действительности методы не являются методами, а объекты - объектами, просто подобная абстракиця удобна для представления.

Объекты адресуются согласно иерархии:

	База Данных > Таблица Данных > Столбец > Строка (или UID) > тэг_1 > тэг_2 > ...

Таким образом мы можем получить доступ не только к значению ячейки, но и к её внутреннему содержимому.

	bd.object.body.12.np.оружие.proveThis{}

Чтобы передать методу параметр, используются фигурные скобки:

	bd.newTable{personage}

Все методы, кроме неявных должны оканчиваться списком аргументов в фигурных скобках или пустыми фигурными скобками, иначе они рассматриваются парсером, как объект цепочки объектов в Базе Данных.

Для разделения параметров используется запятая, например:

	bd.delTables{object,personage,dialogue,etc}

Каждый параметр отвечает понятию "значение", и при записи значений нельзя использовать фигурные скобки и запятые. Если требуется указать в значении фигурную скобку или запятую используйте ссылки на аргументы, а сами значения передавайте остальными аргументами к процедуре 'edb'.
	
```qsp
gosub 'edb','bd.object.newString{eRA56yuDf,<tag>,INVENTORY,,4,15,%args1%}','goto "Dialog","Aleksis Verichev",3,567'
```

Так же нельзя в качестве параметров напрямую записывать кортежи. Если хотите передать в параметр кортеж, пользуйтесь дополнительным аргументом и ссылкой на него:

```qsp
gosub 'edb','bd.object.newString{eRA56yuDf,<tag>,INVENTORY,%args2%,4,15,%args1%}','goto "Dialog","Aleksis Verichev",3,567',(1,2,3,'string')
```

Неявный метод. Данный метод кортеж (Тип Объекта,Имя или Идентификатор Объекта,Содержимое объекта)

Вызов неявного метода осуществляется путём обращения к объекту без явного указания метода. Примеры в каждом объекте отдельно.

Вы можете объединять команды в листы команд (командлист), чтобы упрощённо работать с различными объектами базы данных.

```qsp
local $commands="
	bd.objects.newString{}
	bd.objects.body.000001.name.set{Одноручный меч}
	bd.objects.body.000023.power.fire.set{137}
	bd.dialog.replics.ff012.clr{}.append{power}.append{fire}.set{137}
"
@edb($commands)
```

Каждая команда в таком листе должна записываться на отдельной строке.

--Принципы и порядок обработки комманд и возвращаемых результатов--

"edb" — это общая локация, которая парсит и запускает на выполнение все команды из командлиста. Принцип её работы очень прост. Она разделяет пришедший командлист на отдельные строки команд, а затем поочерёдно обрабатывает каждую строку.

В свою очередь каждая команда разбирается парсером на цепочки объектов-методов и прилагаемых к ним аргументов, а затем происходит обработка этих объектов последовательно один за одним по цепочке.

Объекты в цепочке становятся текущими ("активными") и это означает, что методы применяются именно к ним.

Неявный метод вызывается постоянно для всех объектов, кроме методов.

=Список типов данных, применяемых внутри базы данных=

data_base - сама база данных
data_table — таблица данных в базе данных
table_col - колонка в таблице данных
table_string - строка в таблице данных
table_cell - ячейка в таблице данных

