-третий вариант-

Допустим нам нужна таблица для объектов, и мы назовём её "object". Теоретически команда по добавлению в базу данных может выглядеть так:

			bd.new:object

		Здесь 'bd' — это не совсем корректное название "объекта", с которым мы работаем, а 'new' — это что-то вроде "метода" этого объекта. То есть мы даём команду "таблица.создать" по аналогии с модулем Олегуса.

		Тут сразу возникает несколько синтаксических сложностей. Мы не можем использовать слова 'table','td' или 'dt', поскольку эти слова в HTML зарезервированы для имён тегов. Поэтому используем не совсем корректное слово 'bd'.

		Последняя часть — имя новой таблицы, или её идентификатор, записанный после двоеточия. Таким образом наша команда состоит из:

			объект.метод:значение

		У методов могут быть дополнительные параметры, которые так же указываются через точку.

		Но теперь нужно понять, что именно, технически делает эта команда. Тут есть варианты.

			1. Нужно ли вообще делать что-то технически? Т.е., какие у таблицы могут быть параметры, за которыми требуется следить? Особо никаких. Однако, если эта команда не создаёт никаких записей, то удаление таблицы данных априори невозможно, потому что мы не знаем, какие именно столбцы в ней существуют (о столбцах речь ниже).

			2. Для описания таблицы можно завести отдельный массив по имени таблицы. В этом массиве можно хранить различные параметры:

				$object[]='[shortname:obj]' & ! параметр - короткое имя, позволяющий сокращать команды к таблице
				$object[]='[col:id]' 		& ! столбец в ТД
				$object[]='[col:body]'		& ! столбец в ТД
				$object[]='[col:position]'	& ! столбец в ТД
				$object[]='[col:include]'	& ! столбец в ТД

				и т.д. В принципе, пока что этого достаточно для описания ТД. По сути любая команда, создающая или уничтожающая столбец будет работать именно с таблицей:

					object.col.del:id

				Данная команда получает и удаляет столбец с именем 'id'. Т.е. киллварит массив '$id_object' и удаляет ячейку из '$object', содержащую значение '[col:id]'

			3. Вариант с таблицей таблиц нереализуем и бессмысленен.

-между вторым и третьим вариантом 3-

Создать таблицу таблиц и работать с ней, как с другими таблицами. Технически это мало чем отличается от предыдущего варианта:

				$sql_object[]='[shortname:obj]' & ! параметр - короткое имя, позволяющий сокращать команды к таблице
				$sql_object[]='[col:id]' 		& ! столбец в ТД
				$sql_object[]='[col:body]'		& ! столбец в ТД
				$sql_object[]='[col:position]'	& ! столбец в ТД
				$sql_object[]='[col:include]'	& ! столбец в ТД

				Поскольку это таблица таблиц, удалять её не нужно и невозможно, однако с ней можно работать так же, как и с любой другой таблицей:

					sql.object.string.get:tag.col:id.del

				

-между вторым и третьим вариантом 2-

* имя таблицы /идентификатор/

		Допустим нам нужна таблица для объектов, и мы назовём её "object". Теоретически команда по добавлению в базу данных может выглядеть так:

			bd.add:object

		Здесь 'bd' — это не совсем корректное название "объекта", с которым мы работаем, а 'add' — это что-то вроде "метода" этого объекта. То есть мы даём команду "таблица.добавить" или "таблица.создать" по аналогии с модулем Олегуса.

		Тут сразу возникает несколько синтаксических сложностей. Мы не можем использовать слова 'table','td' или 'dt', поскольку эти слова в HTML зарезервированы для имён тегов.

		Слово 'add' в виде тегов не существует, но оно тоже не совсем корректное, так как мы по сути создаём новую таблицу, а не добавляем в базу уже существующую. Поэтому лучше наверное использовать слово 'new'.

-между вторым и третьим вариантом-

* Стандартизировать таблицы данных, чтобы со всеми можно было работать одинаково.

	* имя таблицы "objects"
	* имя столбца "body"
		(столбцу назначается тип — строковый или числовой, но по факту все данные будут строкового типа)
		(столбец приобретает вид "$objects_body", т.е. имя массива составлено из названия ТД и имени столбца)
	* номер строки
		(все данные хранятся на пересечении столбца и строки, необходимо по идее указывать и строку)
	* значение
		(например, в столбце можно хранить только одно значение без возможности расширения)
	* запись "[name: ]"
		(вот тут уже надо подумать. Мы храним записи разного типа в определённом синтаксисе. Но синтаксис команд sql должен быть прост и просто работать с любым типом)

* Продумать простой синтаксис для работы с такими данными
	
	* Необходимо создать общую процедуру-парсер для работы с ТД для простоты обращения.

		Общая процедура, через которую будут происходить все вызовы пока называется sql. Примерный вызов такой:

			gosub 'sql','bd.add:object'

		Далее опустим всё, кроме команды, передаваемой процедуре.

	* 

-второй вариант-

! общий вид вызова примерно такой
	gosub 'sql','bd.add:object'
	! В будущем, когда перепилят плеер, можно будет делать запросы вида
	@sql,'bd.add:object'
	! далее без sql
	'bd' — работа с базой данных
	'add' — добавляет таблицу данных
	':object' — значение, которое передаём
	! таким образом данная команда создаёт таблицу данных с именем object
	bd.add:object
	! далее можно работать с таблицей. Создаём столбец body в таблице
	object.add:body
	! можно указать несколько столбцов
	object.add:id:body:position:include:kolvo:charge:respawn:run
	! работа с отдельным столбцом должна выглядеть как-то так:
	object.id:INVENTORY & ! вносим в столбец ID значение INVENTORY
	! ... быть может так?
	object.id:tag.add:name.qs.d:Старый меч
	'name' — это название тега
	'qs.d' — это его вид: квадратные скобки, двойной тег.
	object.id:tag.add:name					& ! добавит [name]
	object.id:tag.add:name.qs				& ! добавит [name]
	object.id:tag.add:name.qs.o				& ! добавит [name:]
	object.id:tag.add:name.qs.d				& ! добавит [name::name]
	object.id:tag.add:name.qs.o:Старый меч	& ! добавит [name:Старый меч]
	object.id:tag.add:name.qs.d:Старый меч	& ! добавит [name:Старый меч:name]
	object.id:tag.add:name:Старый меч		& ! добавит [name:Старый меч]
	object.id:tag.add:name.qs:Старый меч	& ! добавит [name:Старый меч]

--первый вариант--

То есть sql будет своего рода парсером.
Запись в столбец должна быть простой вроде:
sql,'object.object_array.[значение]'
Помимо записи столбцов должна поддерживаться запись строк. Строки — то же самое, что и признаки в предметах
sql,object.object_array.[name:Старый меч]
Над этим ещё нужно подумать, ведь указатели в объектах различаются, там есть как строки, так и данные других типов.
Возможно потребуется делать столбцы из имени базы и столбца и тогда можно будет не бояться совпадения имён.
sql.object.array.[значение]
sql,dialog.array.[значение]

Самой верхней само собой создаётся база баз.
$bd.name[]='object'
$bd.cols[]='[array],[id],[и т.д.]'
По хорошему должны быть используемые имена и краткие имена, чтобы меньше уходило на программирование.

Недостаток: ещё одна надстройка только усложнит код. Она в принципе полезна, если нужно работать точечно с чем-либо, но фактически каждый алгоритм будет работать с собственной уже заявленной базой. А вот ссылки между ними это уже вопрос.