==Объект Таблица данных==

Таблица данных — это набор массивов, каждый из которых является столбцом такой таблицы. Соответственно строкой можно считать ряд записей во все массивы Таблицы данных под одним индексом.

/* Так была реализована моя первая таблица данных для всех объектов игры, в т.ч реплик диалогов, персонажей и прочего. Однако, впоследствии оказалось, что хранить все возможные объекты в одной таблице данных невозможно. Это просто перегружает таблицу, усложняет поиск и так далее. Проще разбить общую Таблицу на связанные ссылками Таблицы и таким образом организовать общую Базу данных. */

Так же частью Таблицы Данных является массив, описывающий свойства этой таблицы данных, см. ниже.

Возвращаемый тип: 'data_table'.

=Техническая структура Таблицы Данных=

Внимание! колонка первичных ключей создаётся автоматически и всегда носит название `id` и имеет тип `id_column`, несмотря на то, что написано ниже. Поэтому любая таблица данных всегда имеет колонку первичных ключей.

Это приводит к тому, что если вы создаёте новые колонки в таблице данных не сразу после её создания, а где-то в процессе игры, алгоритм циклом генерирует все пустые ячейки, индексируемые по первичному ключу. Это может существенно подвесить игру. Следует создавать колонки заблаговременно после создания таблицы данных!

Таблица данных представляет собой набор колонок и строк с данными. Каждая колонка технически является массивом, название которого состоит из названия таблицы данных и названия колонки. Например,
	* таблица данных `objects`
	* состоит из колонок `id`, `body`, `position`, `include`, `kolvo`

Технически это означает, что создаются массивы `objects_id`, `objects_body`, `objects_position`, `objects_include`, `objects_kolvo`.

Для описания таблицы используется массив, название которого соответствует идентификатору таблицы данных, т.е. `objects`. Посмотреть примерное заполнение такого массива можно в разделе "Свойства Таблицы Данных".

Строки таблицы формируются записью во все массивы колонок данных под одинаковым индексом. Если определёна колонка идентификаторов, строки индексируются по идентификаторам, хранящимся в этой колонке.

Пример:

```qsp
$objects_id['d001']='d001' & $objects_body['d001']='[kind:старый_меч:kind]' & objects_kolvo['d001']=12
$objects_id['d002']='d002' & $objects_body['d002']='[kind:гнилое_яблоко:kind]' & objects_kolvo['d002']=3
$objects_id['d003']='d003' & $objects_body['d003']='[kind:радиоактивный_пепел:kind]' & objects_kolvo['d003']=9
```

=Команды для работы с таблицей данных=

--Создание таблицы данных--

Чтобы создать Таблицу данных используется метод .newTable{} для Базы данных:

	bd.newTable{идентификатор_таблицы,название_таблицы}

Идентификатор таблицы должен соответствовать требованиям к имени массива, поскольку на основе этого идентификатора будет инициализирован массив, описывающий таблицу данных. Название таблицы можно не указывать. Пример:

	bd.newTable{objects}

--Удаление таблицы данных--

Удаление таблицы данных происходит через метод базы данных .delTables{}. В фигурных скобках указываем один или несколько идентификаторов таблиц через запятую.

	bd.delTables{идентификатор_таблицы}
	bd.delTables{таблица1,таблица2,таблица3}

При вызове данного метода полностью уничтожаются все массивы, соответствующие столбцам таблицы данных, а так же массив, описывающий таблицу данных. Пример:

	bd.delTables{objects}

В данном случае мы удаляем таблицу с идентификатором objects.

=Методы для работы с Таблицей Данных=

	* неявный метод - вывод некоторых данных таблицы данных
	* print - вывод всех свойств таблицы данных
	* setCur - устанавливает таблицу данных, как текущую.
	* newCol — создаёт новую колонку (столбец в таблице)
	* setIdCol - устанавливает колонку идентификаторов. Это одначает, что все элементы строки можно индексировать по идентификатору, лежащему в этой колонке
	* delCols — удаляет несколько столбцов из таблицы
	* newRow — создаёт новую строку в таблице
	* delRows - удаляет несколько строк из таблицы

--Неявный метод--

Неявный метод применительно к таблице вернёт нам кортеж значений: ('data_table',идентификатор_таблицы,список колонок таблицы). Пример:

	bd.objects

Здесь мы вызвали неявный метод для таблицы с идентификатором objects. Если таблица существует, на выходе мы получим примерно такой кортеж:

	('data_table','objects','sid|uid|body|charge|position')

Здесь 'data_table' — это тип данных, к которым был применён неявный метод, 'objects' - идентификатор этих данных, а список столбцов - содержимое. Если для таблицы данных было указано имя, будет возвращено имя таблицы.

См. локацию edb.dt.implicit

--set_cur--

Данный метод позволяет установить таблицу данных текущей. Это в основном вспомогательный метод, так как любой другой метод, применяемый к таблице данных делает указанную таблицу данных текущей.

--print--

Данный метод выводит всю имеющуюся по таблице данных общую информацию.

Информацию, выводимую с помощью этого метода, можно посмотреть в разделе "Свойства Таблицы Данных".

--newCol--

Создаёт новую колонку указанного типа в Таблице Данных.

	bd.objects.newCol{body,dict}

Здесь body - идентификатор колонки, а dict - её тип. Можно не указывать тип, тогда создаётся колонка строкового типа.

/*
--setIdCol--

Устанавливает колонку, как колонку идентификаторов. Иными словами, в этой колонке прописываются те самые идентификаторы, по которым индексируются строки.

	bd.objects.setIdCol{id}

Колонка идентификаторов может быть только одна, и это может быть только строковая колонка (тип str)!


UPD^ удалил данный метод. Он больше не нужен. Колонка идентификаторов генерируется автоматически при создании таблицы данных.
*/

--del_сol--

Удаляет колонку из Таблицы Данных:

--newRow--

Создаёт новую строку в таблице.

```python
	bd.objects.newRow{d00000001}
	bd.objects.newRow{d00000002,[kind:[power:[fire:123:fire]:power]:kind],d00000001,d00000003,12,345,!@ некий код}
	bd.objects.newRow{}
	bd.objects.newRow{d00000003,[tire:[p:[uron:375:uron]:p]:tire][body:999:body],!@ещё код,[id|body|run]/dw}
```

Если указано одно значение, то считается, что передан идентификатор строки, и значит будет создана пустая строка, но с указанным идентификатором.
Если аргументы не переданы совсем, создаётся пустая строка без идентификатора. Работать с такой строкой можно только по номеру!
Если указано несколько значений, они присваиваются отдельным ячейкам в колонках в порядке расположения колонок в списке в таблице данных. Иными словами в том порядке, в каком колонки создавались. Не указанные значения (не пустые, а именно не указанные)

--delRows--

Удаляет перечисленные строки. Строки можно удалять как по номерам, так и по идентификторам. Можно указать до 17 строк на удаление.

```python
	bd.objects.delRows{d00000001,3,d00000003,6,7}
```

Идентификаторы хранятся только в виде строк. Поэтому, если даже мы используем в качестве идентификаторов обычные числа, они всё равно хранятся в виде строк. Это позволяет отличать идентификаторы непосредственно от номеров строк.

Не желательно использовать для идентификации строк и номера и идентификаторы, лучше пользоваться чем-то одним, а ещё лучше исключительно строковыми идентификаторами.

=Свойства Таблицы Данных=

В данном разделе будут показаны типовые переменные Таблиц Данных на примере таблицы с идентификатором `objects`.

$objects['ID'] - идентификатор таблицы. Совпадает с названием массива, в котором хранится.
$objects['NAME'] — название таблицы данных. Это название должно выражать краткую суть таблицы.

$objects['columns'] - список колонок (столбцов) вида:

```qsp
	$objects['columns']='sid|uid|body|position|include|charge|count|run'
```

$objects['current_col'] - идентификатор текущей колонки. Указатель на активную колонку.

/*

Некоторая информация о колонках закладывается в переменные таблицы данных вида:

$objects[$id_col,'col_type'] — здесь $id_col — это идентификатор колонки в таблице. В эти ячейки вносится тип содержащихся в колонках данных. Пример:

```qsp
$objects['sid','col_type']='str'
$objects['uid','col_type']='str'
$objects['body','col_type']='dict'
$objects['position','col_type']='str'
$objects['include','col_type']='str'
$objects['charge','col_type']='num'
$objects['count','col_type']='num'
$objects['run','col_type']='str'
```

*/
